// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using equilog_backend.Data;

#nullable disable

namespace equilog_backend.Migrations
{
    [DbContext(typeof(EquilogDbContext))]
    [Migration("20250402122301_InitManytoManyRelations")]
    partial class InitManytoManyRelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("equilog_backend.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StableIdFk")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("StableIdFk");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("equilog_backend.Models.Horse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Age")
                        .HasColumnType("datetime2");

                    b.Property<string>("Breed")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Horses");
                });

            modelBuilder.Entity("equilog_backend.Models.Stable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Stable");
                });

            modelBuilder.Entity("equilog_backend.Models.StableHorse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HorseIdFk")
                        .HasColumnType("int");

                    b.Property<int>("StableIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HorseIdFk");

                    b.HasIndex("StableIdFk");

                    b.ToTable("StableHorse");
                });

            modelBuilder.Entity("equilog_backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("equilog_backend.Models.UserStable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("StableIdFk")
                        .HasColumnType("int");

                    b.Property<int>("UserIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StableIdFk");

                    b.HasIndex("UserIdFk");

                    b.ToTable("UserStable");
                });

            modelBuilder.Entity("equilog_backend.UserHorse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HorseIdFk")
                        .HasColumnType("int");

                    b.Property<int>("UserIdFk")
                        .HasColumnType("int");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HorseIdFk");

                    b.HasIndex("UserIdFk");

                    b.ToTable("UserHorse");
                });

            modelBuilder.Entity("equilog_backend.Models.Event", b =>
                {
                    b.HasOne("equilog_backend.Models.Stable", "Stable")
                        .WithMany()
                        .HasForeignKey("StableIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stable");
                });

            modelBuilder.Entity("equilog_backend.Models.StableHorse", b =>
                {
                    b.HasOne("equilog_backend.Models.Horse", "Horse")
                        .WithMany("StableHorses")
                        .HasForeignKey("HorseIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("equilog_backend.Models.Stable", "Stable")
                        .WithMany("StableHorses")
                        .HasForeignKey("StableIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Horse");

                    b.Navigation("Stable");
                });

            modelBuilder.Entity("equilog_backend.Models.UserStable", b =>
                {
                    b.HasOne("equilog_backend.Models.Stable", "Stable")
                        .WithMany("UserStables")
                        .HasForeignKey("StableIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("equilog_backend.Models.User", "User")
                        .WithMany("UserStables")
                        .HasForeignKey("UserIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stable");

                    b.Navigation("User");
                });

            modelBuilder.Entity("equilog_backend.UserHorse", b =>
                {
                    b.HasOne("equilog_backend.Models.Horse", "Horse")
                        .WithMany("UserHorses")
                        .HasForeignKey("HorseIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("equilog_backend.Models.User", "User")
                        .WithMany("UserHorses")
                        .HasForeignKey("UserIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Horse");

                    b.Navigation("User");
                });

            modelBuilder.Entity("equilog_backend.Models.Horse", b =>
                {
                    b.Navigation("StableHorses");

                    b.Navigation("UserHorses");
                });

            modelBuilder.Entity("equilog_backend.Models.Stable", b =>
                {
                    b.Navigation("StableHorses");

                    b.Navigation("UserStables");
                });

            modelBuilder.Entity("equilog_backend.Models.User", b =>
                {
                    b.Navigation("UserHorses");

                    b.Navigation("UserStables");
                });
#pragma warning restore 612, 618
        }
    }
}
